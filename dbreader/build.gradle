plugins {
    id 'java'
}

group = 'com.github.houndkirk.weather'
version = '0.9'

repositories {
    mavenCentral()
}

configurations {
    mockitoAgent
}

dependencies {
    implementation project(':common')
    implementation project(':db')

    // Use JUnit Jupiter, Mockito and Hamcrest for testing.
    testImplementation libs.junit.jupiter
    testImplementation libs.hamcrest
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit
    mockitoAgent(libs.mockito.core) {
        transitive = false
    }

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Marshalling of lambda output to JSON
    implementation libs.gson

    // AWS SDK and libraries
    implementation libs.aws.lambda.core
    implementation libs.aws.lambda.events

    // Logging
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl:2.24.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    from project.sourceSets.main.allSource
    from project(":common").sourceSets.main.java.srcDirs
    from project(":db").sourceSets.main.java.srcDirs
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks {
    test {
        jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
    }
}

// This closure will return the full directory path of folder where your classes are built
ext.moduleClassPath = { moduleName ->
    def classOutputDirConst = "/classes/java/main"
    return "${project(":${moduleName}").buildDir}${classOutputDirConst}"
}

tasks.register('buildZip', Zip) {
    from compileJava
    from processResources
//    from moduleClassPath("common")
//    from moduleClassPath("db")
    into('lib') {
        from configurations.runtimeClasspath
    }
}

build.dependsOn buildZip
